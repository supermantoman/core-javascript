// 브라우저 기본동작 차단하기 
e.preventDefault

// 노드 추가
node.insertAdjacentHTML();
insertLast('.result', total)


//텍스트비우기
getNode('.result').textContent = '';

// 인풋에 어떤 변화가 일어났는지 실시간체크해주는 이벤트 : change !
firstInput.addEventListener('change', inputHandler)

secondInput.addEventListener('change', inputHandler)

------------------------

//모듈 프로그래밍
각각의 부품과 같다. 모두 다 모듈화 시키는 개념이다. 앱크기가 커지면 언젠가 분리해야할 시점이 온다. 더 거대해졌을 때 모듈이 꼭 필요하다.

던지는게 있고 받는게 있다.
export - 

모듈은 특수한 키워드나 기능과 함께 사용되므로 <script type="module"> 같은 속성을 설정해 해당 스크립트가 모듈이란 걸 브라우저가 알 수 있게 해줘야 합니다.
//이게 시작임

//중요하다 이거!
모듈은 로컬 파일에서 동작하지 않고, HTTP 또는 HTTPS 프로토콜을 통해서만 동작합니다.
로컬에서 file:// 프로토콜을 사용해 웹페이지를 열면 import, export 지시자가 동작하지 않습니다. 예시를 실행하려면 로컬 웹 서버인 static-server나, 코드 에디터의 ‘라이브 서버’ 익스텐션(Visual Studio Code 에디터의 경우 Live Server Extension)을 사용하세요.
**무조건 서버가있어야 구동됨. 더블클릭안댐.

//기존거랑차이점
모듈은 무조건 엄격모드로 실행됨. use strict 가 내장됨. 

**모듈은 자신만의 스코프가 있음. 모듈내부에 정의한 변수나 함수는 다른 스크립트에서 접근 불가!!!!
ex) 겟노드 함수만들고 아무데나 가져가서 쓸수잇었는데 모듈에서는 안됨.
**ex - im 해줘야 됨

즉 전역을 전혀 

**import 문은 최상위에 써줘야함오염시키지 않는다는 의미.

export, import(입장권이 있어야 들어갈수있는 것)

//defer 쓸 필요없다 내장되있어서
모듈 스크립트는 항상 지연 실행됩니다. 외부 스크립트, 인라인 스크립트와 관계없이 마치 defer 속성을 붙인 것처럼 실행됩니다(defer속성에 대한 자세한 내용은 defer, async 스크립트에서 확인할 수 있습니다).

//경로가 없는 모듈은 금지
브라우저 환경에서 import는 반드시 상대 혹은 절대 URL 앞에 와야 합니다. ‘경로가 없는’ 모듈은 허용되지 않습니다. 경로 입력 필요. 리액트로가면 경로없이도 쓸수있땅.

//빌드툴 - 전반적인 프엔 개발의 흐름을 알려줌
웹팩과 비트를 대개는 사용함. 이런 툴을 빌드툴이라고 함. 특별한 툴을 사용해서 모듈을 한 데 묶어서 번들링이라는 과정을 거쳐 사용함. 번들러 사용하면 모듈 분해 통제가능함. 웹팩은 웹킷과는 다르다. 웹킷은 브라우저안에 내장된 기능이고 웹팩은 도구이다.** html css js 뿐 아니라 우리 폴더안에 다양한 작업물이 잇는데 서버에 올릴 수는 있지만, 문제가 최적화가 되지않는다는 것이다.

**빌드툴의 가장 기본이 모듈 프로그래밍이다!
필요없는 파일 다 삭제 해줌. 가지치기를 해보림!

 //entry
re-export 문법
중간다리역할자 필요
파일이 겁나많아져서 더러워짐 즉 가독성이 떨어짐 ! 그래서 좀 분리해서 중간다리필요! 리익스포트 문법 사용해서. **관심사의 분리를 해주는 것!

//폴더로 가져올수도 있고, 파일로도 가져올수잇음~ 폴더로 가져오면 하위 파일들이 다 적용됨.
import { 
  getNode,css, 
  addClass, removeClass, toggleClass,
  typeError, refError, syntaxError
} from "./lib/dom"; //폴더명

